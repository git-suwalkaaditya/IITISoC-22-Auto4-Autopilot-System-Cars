<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="delybot">

    <!-- BOX PROPERTIES -->
    <xacro:property name="box_width" value="0.45" />    <!-- Y-->
    <xacro:property name="box_depth" value="0.63" />    <!-- X-->
    <xacro:property name="box_height" value="0.54" />   <!-- Z-->
    <xacro:property name="box_mass" value="42" />       <!-- original: 42 kg-->


    <!-- WHEEL PROPERTIES -->
    <xacro:property name="wheel_radius" value="0.11" />
    <xacro:property name="wheel_width" value="0.08" />
    <xacro:property name="wheel_offset_from_bottom_chassis" value="0.0" />
    <xacro:property name="wheel_offset_from_front_chassis" value="0.05" />
    <xacro:property name="wheel_offset_from_back_chassis" value="0.05" />
    <xacro:property name="wheel_mass" value="0.5" />    <!-- original: 0.5 kg-->

    <!-- MACRO DEFINITION -->

    <!-- DEFAULT INERTIA MACRO -->
    <xacro:macro name="default_inertial" params="mass">
        <inertial>
            <mass value="${mass}" />
            <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="box_inertial" params="x y z mass">
        <inertial>
            <mass value="${mass}" />
            <origin xyz="0 0 0" />
            <inertia ixx="${0.0833333 * mass * (y*y + z*z)}" ixy="0.0" ixz="0.0"
                    iyy="${0.0833333 * mass * (x*x + z*z)}" iyz="0.0"
                    izz="${0.0833333 * mass * (x*x + y*y)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertial" params="radius length mass">
        <inertial>
        <mass value="${mass}" />
        <origin xyz="0 0 0"/>
        <inertia ixx="${0.0833333 * mass * (3 * radius * radius + length * length)}" ixy="0.0" ixz="0.0"
                iyy="${0.0833333 * mass * (3 * radius * radius + length * length)}" iyz="0.0"
                izz="${0.5 * mass * radius * radius}" />
        </inertial>

        <!-- <inertia ixx="0.02" ixy="0.0" ixz="0.0"
                iyy="0.02" iyz="0.0"
                izz="0.003" />
        </inertial> -->
    </xacro:macro>

    <!-- WHEEL MACRO -->
    <xacro:macro name="wheel_macro" params="position x y actuated:=false">
        <link name="${position}_wheel">
            <visual>
                <material name="black"/>
                <origin xyz="0.0 0.0 0.0" rpy="1.57075 0.0 0.0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
            </visual>
            <collision>
                <origin xyz="0.0 0.0 0.0" rpy="1.57075 0.0 0.0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
            </collision>
            <xacro:cylinder_inertial radius="${wheel_radius}" length="${wheel_width}" mass="${wheel_mass}"/>
            <!-- <xacro:default_inertial mass="${wheel_mass}"/> -->
        </link>

        <gazebo reference="${position}_wheel">
            <!-- <mu1 value="100.0"/>
            <mu2 value="50.0"/> -->
            <kp value="1000000.0" />  
            <kd value="1.0" />
            <selfCollide>true</selfCollide>
        </gazebo>

        <!-- JOINT DEFINITION -->

        <joint name="${position}_wheel_joint" type="continuous">
            <origin xyz="${x} ${y} -${box_height/2 - wheel_offset_from_bottom_chassis}" rpy="0.0 0.0 0.0"/>
            <parent link="base_box"/>
            <child link="${position}_wheel"/>
            <axis xyz="0.0 1.0 0.0"/>
            <!-- <limit lower="0.0" upper="0.0" effort="0.0" velocity="0.0"/> -->
        </joint>

        <gazebo reference="${position}_wheel">
            <material>Gazebo/FlatBlack</material>
        </gazebo>

        <!-- TRASMISSION DEFINITION -->

        <transmission name="${position}_wheel_joint_tran" type="SimpleTransmission">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="${position}_wheel_joint">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
            </joint>
            <xacro:if value="true">
                <actuator name="${position}_wheel_joint_motor">
                    <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
                    <mechanicalReduction>1</mechanicalReduction>
                </actuator>
            </xacro:if>
        </transmission>

    </xacro:macro>

    <!-- MATERIAL DEFINITIONS -->

    <material name="black">
        <color rgba="0.0 0.0 0.0 1.0"/>
    </material>

    <material name="white">
        <color rgba="1.0 1.0 1.0 1.0"/>
    </material>

    <!-- BASE LINK -->

    <link name="base_link"/>


    <!-- BASE BOX -->

    <link name="base_box">
        <visual>
            <material name="white"/>
            <geometry>
                <box size="${box_depth} ${box_width} ${box_height}"/>
            </geometry>
        </visual>
        <collision>
            <geometry>
                <box size="${box_depth} ${box_width} ${box_height}"/>
            </geometry>
        </collision>
        <xacro:box_inertial x="${box_depth}" y="${box_width}" z="${box_height}" mass="${box_mass}"/>
        <!-- <xacro:default_inertial mass="${box_mass}"/> -->
    </link>

    <gazebo reference="base_box">
        <material>Gazebo/Orange</material>
    </gazebo>

    <!-- BOX - BASE JOINT -->

    <joint name="box_to_base_link_joint" type="fixed">
        <parent link="base_link"/>
        <child link="base_box"/>
    </joint>

    <!-- LEFT FRONT WHEEL -->

    <xacro:wheel_macro position="left_front" x="${box_depth/2 - wheel_offset_from_front_chassis}" y="${box_width/2 + wheel_width/2}" actuated="true"/>

    <!-- LEFT CENTER WHEEL -->

    <xacro:wheel_macro position="left_center" x="0" y="${box_width/2 + wheel_width/2}"/>

    <!-- LEFT BACK WHEEL -->

    <xacro:wheel_macro position="left_back" x="${-box_depth/2 + wheel_offset_from_front_chassis}" y="${box_width/2 + wheel_width/2}" actuated="true"/>

    <!-- RIGHT FRONT WHEEL -->

    <xacro:wheel_macro position="right_front" x="${box_depth/2 - wheel_offset_from_front_chassis}" y="${-box_width/2 - wheel_width/2}" actuated="true"/>

    <!-- RIGHT CENTER WHEEL -->

    <xacro:wheel_macro position="right_center" x="0" y="${-box_width/2 - wheel_width/2}"/>

    <!-- RIGHT BACK WHEEL -->

    <xacro:wheel_macro position="right_back" x="${-box_depth/2 + wheel_offset_from_front_chassis}" y="${-box_width/2 - wheel_width/2}" actuated="true"/>

    <!-- LIDAR SENSOR -->

    <joint name="scan_joint" type="fixed">
        <parent link="base_link"/>
        <child link="base_scan"/>
        <origin xyz="${box_depth/4} 0 ${box_height/2 + 0.0315}" rpy="0 0 0"/>
    </joint>

    <link name="base_scan">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <mesh filename="package://delybot_description/sensors/lds.stl" scale="0.001 0.001 0.001"/>
                </geometry>
            <material name="black"/>
        </visual>

        <collision>
            <origin xyz="0.015 0 -0.0065" rpy="0 0 0"/>
            <geometry>
                <cylinder length="0.0315" radius="0.055"/>
            </geometry>
        </collision>

        <inertial>
            <mass value="0.114" />
            <origin xyz="0 0 0" />
            <inertia ixx="0.001" ixy="0.0" ixz="0.0"
                    iyy="0.001" iyz="0.0"
                    izz="0.001" />
        </inertial>
    </link>

    <gazebo reference="base_scan">
        <material>Gazebo/FlatBlack</material>
    </gazebo>    

    <!-- IMU SENSOR -->

    <link name="imu_link"/>

    <joint name="imu_joint" type="fixed">
        <parent link="base_link"/>
        <child link="imu_link"/>
        <origin xyz="0.0 0 ${box_height/2}" rpy="0 0 0"/>
    </joint>

    <!-- GAZEBO PLUGIN -->


    <!-- ROS CONTROL PLUGIN -->

    <gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <robotNamespace>/</robotNamespace>
        </plugin>
    </gazebo>

    <!-- LIDAR SENSOR PLUGIN -->

    <gazebo reference="base_scan">
        <material>Gazebo/FlatBlack</material>
        <sensor type="gpu_ray" name="lds_lfcd_sensor">
            <pose>0 0 0 0 0 0</pose>
            <visualize>false</visualize>
            <update_rate>5</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>360</samples>
                        <resolution>2</resolution>
                        <min_angle>0.0</min_angle>
                        <max_angle>6.28319</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.120</min>
                    <max>10</max>
                    <resolution>0.015</resolution>
                </range>
                <noise>
                    <type>gaussian</type>
                    <mean>0.0</mean>
                    <stddev>0.01</stddev>
                </noise>
            </ray>
            <plugin name="gazebo_ros_lds_lfcd_controller" filename="libgazebo_ros_gpu_laser.so">
                <topicName>scan</topicName>
                <frameName>base_scan</frameName>
            </plugin>
        </sensor>
    </gazebo>

    <!-- IMU PLUGIN -->

    <gazebo reference="imu_link">
        <sensor type="imu" name="imu">
            <always_on>true</always_on>
            <visualize>true</visualize>
        </sensor>
        <material>Gazebo/Grey</material>
    </gazebo>

    <gazebo>
    <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
        <alwaysOn>true</alwaysOn>
        <bodyName>imu_link</bodyName>
        <frameName>imu_link</frameName>
        <topicName>imu</topicName>
        <serviceName>imu_service</serviceName>
        <gaussianNoise>0.0</gaussianNoise>
        <updateRate>0</updateRate>
        <imu>
        <noise>
            <type>gaussian</type>
                <rate>
                    <mean>0.0</mean>
                    <stddev>2e-4</stddev>
                    <bias_mean>0.0000075</bias_mean>
                     <bias_stddev>0.0000008</bias_stddev>
                </rate>
                    <accel>
                       <mean>0.0</mean>
                        <stddev>1.7e-2</stddev>
                        <bias_mean>0.1</bias_mean>
                        <bias_stddev>0.001</bias_stddev>
                    </accel>
                </noise>
            </imu>
        </plugin>
    </gazebo>



</robot>
